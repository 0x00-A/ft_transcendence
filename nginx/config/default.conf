upstream backend {
    server backend:8000;
}

# upstream frontend {
#     server frontend:3000;
# }

upstream kibana {
    server kibana:5601;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    # server_name ft-pong.me www.ft-pong.me;

    return 301 https://$host$request_uri;
}

# HTTPS Server Block
server {
    listen 443 ssl;
    http2 on;

    # server_name ft-pong.me www.ft-pong.me;
    # server_name e2r6p15.1337.ma www.e2r6p15.1337.ma;

    # add_header Content-Security-Policy "upgrade-insecure-requests";

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

    ssl_protocols TLSv1.2 TLSv1.3;

    # Root directory for the React build
    root /usr/share/nginx/html;
    index index.html;

    access_log   /var/log/nginx/access.log combined;
    error_log    /var/log/nginx/error.log warn;

    location / {
        try_files $uri $uri/ /index.html;
        # proxy_pass http://frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/ {
        proxy_pass http://backend;
        proxy_set_header Host $host; # Preserve the original Host header.
        proxy_set_header X-Real-IP $remote_addr; # Pass the client IP to the backend.
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Chain client IPs in case of proxies.
        # proxy_set_header X-Forwarded-Proto $scheme; # Indicate whether the request is HTTPS or HTTP.
    }
    location /kibana/ {
        proxy_pass http://kibana;
        proxy_set_header Host $host; # Preserve the original Host header.
        proxy_set_header X-Real-IP $remote_addr; # Pass the client IP to the backend.
        # proxy_set_header X-Forwarded-Proto $scheme; # Indicate whether the request is HTTPS or HTTP.
        # rewrite ^/kibana/(.*)$ /$1 break;
    }

    location /admin/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /ws/ {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade; # Support WebSocket protocol upgrade.
        proxy_set_header Connection 'upgrade'; # Maintain the connection upgrade.
        proxy_set_header Host $host;
        proxy_cache off;
        proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-Proto $scheme;
    }

    location ~ ^/(static|media)/ {
        root /web;
    }

    client_max_body_size 10M;
}
