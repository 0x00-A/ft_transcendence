// React
import { useEffect, useState } from 'react'
// Styles
import css from './EditSecurityProfile.module.css';
import { BiHide } from "react-icons/bi";
import { BiShow } from "react-icons/bi";
import { TbDeviceMobileMessage } from "react-icons/tb";
import { toast } from 'react-toastify';
// Hooks
import useChangePass from '@/hooks/profile/useChangePass';


interface ChangePasswordForm {
  current_password: string;
  new_password: string;
  confirm_password: string;
}

const EditSecurityProfile = ({setEditProfile}) => {

    const { register, handleSubmit, errors, mutation } = useChangePass();
    const [showPassword, setShowPassword] = useState({
        current_pass: false,
        new_pass: false,
        confirm_pass: false
    });

    const togglePasswordVisibility = (field) => {
        setShowPassword((prevState) => ({
          ...prevState,
          [field]: !prevState[field],
        }));
    };
    useEffect(() => {
        if (mutation.isSuccess) {
            toast.success(mutation.data.message);
            setEditProfile(false);
        }
   }, [mutation.isSuccess]);
   useEffect(() => {
        // if (mutation.isError) {
        //     toast.error(mutation.error.response.data.error);
        // }
   }), [mutation.isError];

    const handleChangePassword = (data: ChangePasswordForm) => {
        console.log(data);
        mutation.mutate(data);
    };

    return (
        <div className={css.securityContainer}>
            <form action="submit" className={css.changePassForm} onSubmit={handleSubmit(handleChangePassword)}>
                <h1 className={css.title}>Change Password</h1>
                <div className={css.containerFiled}>
                    <label htmlFor="" className={css.label}>Current Password</label>
                    <div><input type={ showPassword.current_pass ? "text" : "password"} className={css.input} {...register('current_password')}/>
                    {showPassword.current_pass ?
                      <BiShow className={css.showPassIcon} onClick={() => togglePasswordVisibility("current_password")}/> :
                      <BiHide className={css.showPassIcon} onClick={() => togglePasswordVisibility("current_password")}/>
                    }</div>
                    {errors.current_password && <span className={css.fieldError}>{errors.current_password.message}</span>}
                </div>
                <div className={css.containerFiled}>
                    <label htmlFor="" className={css.label}>New Password</label>
                    <div><input type={ showPassword.new_pass ? "text" : "password"} className={css.input} {...register('new_password')}/>
                    {showPassword.new_pass ?
                      <BiShow className={css.showPassIcon} onClick={() => togglePasswordVisibility("new_password")}/> :
                      <BiHide className={css.showPassIcon} onClick={() => togglePasswordVisibility("new_password")}/>
                    }</div>
                    {errors.new_password && <span className={css.fieldError}>{errors.new_password.message}</span>}
                </div>
                <div className={css.containerFiled}>
                    <label htmlFor="" className={css.label}>Confirm New Password</label>
                    <div><input type={ showPassword.confirm_pass ? "text" : "password"} className={css.input} {...register('confirm_password')}/>
                    {showPassword.confirm_pass ?
                      <BiShow className={css.showPassIcon} onClick={() => togglePasswordVisibility("confirm_password")}/> :
                      <BiHide className={css.showPassIcon} onClick={() => togglePasswordVisibility("confirm_password")}/>
                    }</div>
                    {errors.confirm_password && <span className={css.fieldError}>{errors.confirm_password.message}</span>}
                </div>
                <div className={css.ConfirmButtons}>
                    <button type='reset' className={css.closeBtn}>Reset</button>
                    <button type='submit' className={css.confirmBtn}>Save</button>
                </div>
            </form>
            <form action="submit" className={css.twoFacForm}>
                <h1 className={css.title}>Two Factor Authentication (2Fa)</h1>
                <div className={css.twoFacContainer}>
                    <div className={css.inputContainer}>
                        <p>Get verification codes from an authenticator app such as Google Authenticator, It works even if your phone is offline. Scan the QR code</p>
                        <div className={css.labelIcon}>
                            <TbDeviceMobileMessage className={css.mobileMsgIcon}/>
                            <label>Enter the 6-digit verification code generated by your authenticator app.</label>
                        </div>
                        <div className={css.inputBtn}>
                            <input type="text" className={css.verifCode}/>
                            <button className={css.enableBtn}>Enable 2FA</button>
                        </div>
                    </div>
                    <div className={css.qrCodeContainer}>
                        <img src="/icons/qrCodeBtn.svg" alt="" />
                    </div>
                </div>
            </form>
        </div>
  )
}

export default EditSecurityProfile
