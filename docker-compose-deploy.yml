services:
  # backend:
  #   build:
  #     context: ./backend
  #     args:
  #       DEV: "false"
  #     dockerfile: Dockerfile.prod
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     # - ./backend:/app/backend
  #     - static_data:/app/backend/static
  #     - django-logs:/app/backend/logs
  #     # - ./logs/django_logs.log:/app/backend/django_logs.log
  #   environment:
  #     # - ALLOWED_HOSTS=0.0.0.0,localhost,127.0.0.1,10.11.6.14
  #     - ALLOWED_HOSTS=$ALLOWED_HOSTS
  #     - DB_HOST=$DB_HOST
  #     - DB_NAME=$DB_NAME
  #     - DB_USER=$DB_USER
  #     - DB_PASS=$DB_PASS
  #     - REDIS_HOST=$REDIS_HOST
  #     - REDIS_PORT=$REDIS_PORT
  #     - DEBUG=0
  #     - SECRET_KEY=$SECRET_KEY
  #   env_file:
  #     - .env
  #   networks:
  #     - default_network-deploy
  #   depends_on:
  #     db:
  #       condition: service_started
  #     redis:
  #       condition: service_started
  #   restart: on-failure
  #   healthcheck:
  #     test: ["CMD", "python", "manage.py", "check"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 10s

  # frontend:
  #   build:
  #     context: frontend
  #     dockerfile: Dockerfile.prod
  #   # ports:
  #   #   - "3000:3000"
  #   volumes:
  #     - react_build:/app/dist
  #   networks:
  #     - default_network-deploy
  #   depends_on:
  #     - backend
  #       #condition: service_healthy

  # db:
  #   image: postgres:13-alpine
  #   restart: on-failure
  #   # build:
  #   #   context: ./db
  #   #   dockerfile: Dockerfile

  #   # ports:
  #   #   - '5432:5432'
  #   volumes:
  #     - db-data:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_DB=$DB_NAME
  #     - POSTGRES_USER=$DB_USER
  #     - POSTGRES_PASSWORD=$DB_PASS
  #   networks:
  #     - default_network-deploy

  # redis:
  #   image: "redis:latest"
  #   restart: on-failure
  #   # ports:
  #   #   - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - default_network-deploy

  # nginx:
  #   build:
  #     context: ./nginx
  #     dockerfile: Dockerfile
  #   restart: on-failure
  #   volumes:
  #     - ./certs/letsencrypt:/etc/letsencrypt
  #     - static_data:/web
  #     - react_build:/usr/share/nginx/html
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   networks:
  #     - default_network-deploy
  #   depends_on:
  #     - backend
  #       #condition: service_healthy

  # The setup service is responsible for setting up the Elasticsearch cluster
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    # The user to run commands as inside the container
    user: "0"
    # The command to run inside the container
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -e "instances:\n  - name: es\n    dns:\n      - es\n      - localhost\n      - 127.0.0.1\n  - name: kibana\n    dns:\n      - kibana\n      - localhost\n      - 127.0.0.1" > config/certs/instances.yml;
          elasticsearch-certutil cert --silent --pem --ca-cert config/certs/ca/ca.crt \
            --ca-key config/certs/ca/ca.key \
            --in config/certs/instances.yml \
            -out config/certs/certs.zip;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions";
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt https://es:9200 | grep -q "missing authentication credentials"; do sleep 10; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt \
          -u "elastic:${ELASTIC_PASSWORD}" \
          -H "Content-Type: application/json" \
          https://es:9200/_security/user/kibana_system/_password \
          -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
          echo "All done!";
      '
    # chown -R root:root config/certs;
    # find . -type d -exec chmod 750 \{\} \;;
    # find . -type f -exec chmod 640 \{\} \;;
    # chown -R elasticsearch:elasticsearch /usr/share/elasticsearch/config/certs &&
    # chmod -R 600 /usr/share/elasticsearch/config/certs/*
    # touch /usr/share/elasticsearch/config/certs/es/es.crt
    networks:
      - default_network-deploy

    # The healthcheck to determine the health of this service
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es/es.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es:
    build:
      context: ./elk/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      # - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - certs:/usr/share/elasticsearch/config/certs
      - es-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - node.name=es
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es/es.key
      - xpack.security.http.ssl.certificate=certs/es/es.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es/es.key
      - xpack.security.transport.ssl.certificate=certs/es/es.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      # - xpack.license.self_generated.type=${LICENSE}
    networks:
      - default_network-deploy
    depends_on:
      setup:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"]
      interval: 10s
      retries: 120


  logstash:
    # image: docker.elastic.co/logstash/logstash:8.12.2
    build:
      context: ./elk/logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    # container_name: elk-logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/config/certs
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline
      # - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - django-logs:/var/log/django
      - ls-data:/usr/share/logstash/data

    ports:
      - "5044:5044"
    environment:
      # - node.name=logstash
      # LS_JAVA_OPTS: -Xms256m -Xmx256m
      # LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      # http.host: 0.0.0.0
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es:9200
    depends_on:
      es:
        condition: service_healthy
    networks:
      - default_network-deploy
    restart: unless-stopped

  kibana:
    build:
      context: ./elk/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      # - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
      - certs:/usr/share/kibana/config/certs
      - kb-data:/usr/share/kibana/data
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/kibana/config/certs/ca/ca.crt
      # - xpack.security.audit.enabled=true
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_CERTIFICATE=/usr/share/kibana/config/certs/kibana/kibana.crt
      - SERVER_SSL_KEY=/usr/share/kibana/config/certs/kibana/kibana.key

      # - KIBANA_SYSTEM_PASSWORD=${KIBANA_PASSWORD:-}
    networks:
      - default_network-deploy
    depends_on:
      es:
        condition: service_healthy
    restart: unless-stopped

volumes:
  db-data:
  redis_data:
  static_data:
  react_build:
  django-logs:
  es-data:
  ls-data:
  kb-data:
  certs:


networks:
  default_network-deploy:
    driver: bridge


# services:
#   app:
#     build:
#       context: .
#     volumes:
#       - static_data:/web
#     environment:
#       - SECRET_KEY=valueforsecretkey
#       - ALLOWED_HOSTS=127.0.0.1,localhost

#   proxy:
#     build:
#       context: ./proxy
#       dockerfile: Dockerfile
#     volumes:
#       - static_data:/web
#     ports:
#       - "8080:8080"
#     depends_on:
#       - app

# volumes:
#   static_data:
